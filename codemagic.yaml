workflows:
  ios_testflight:
    name: ThreadLoop iOS (Capacitor → TestFlight)
    max_build_duration: 60
    instance_type: mac_mini_m2

    integrations:
      app_store_connect: "ThreadLoop API Key"   # exact name from Codemagic

    environment:
      xcode: latest
      node: 18
      cocoapods: default
      vars:
        BUNDLE_ID: "com.threadloop.app"
        TEAM_ID: "WF7869BFQ2"
        SCHEME: "App"
        WORKSPACE: "ios/App/App.xcworkspace"
        PROJECT_PATH: "ios/App"

    scripts:
      - name: Install Node deps
        script: |
          npm ci || npm i

      - name: Build web assets
        script: |
          npm run build

      - name: Add/sync iOS (Capacitor)
        script: |
          npx cap add ios || true
          npx cap sync ios

      - name: Install CocoaPods
        working_directory: ios/App
        script: |
          pod install --repo-update

      # NEW: make sure Xcode project uses the correct bundle id & team
      - name: Ensure bundle id & team in Xcode project
        working_directory: ios/App
        script: |
          set -e
          echo "Before (bundle/team occurrences):"
          grep -n "PRODUCT_BUNDLE_IDENTIFIER" App.xcodeproj/project.pbxproj || true
          grep -n "DEVELOPMENT_TEAM" App.xcodeproj/project.pbxproj || true

          # Update all occurrences in the pbxproj (BSD sed on macOS -> -i '')
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_ID;/g" App.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = [A-Z0-9]*/DEVELOPMENT_TEAM = $TEAM_ID/g" App.xcodeproj/project.pbxproj

          echo "After (bundle/team occurrences):"
          grep -n "PRODUCT_BUNDLE_IDENTIFIER" App.xcodeproj/project.pbxproj || true
          grep -n "DEVELOPMENT_TEAM" App.xcodeproj/project.pbxproj || true

          echo "Key Xcode build settings now:"
          xcodebuild -workspace "../App.xcworkspace" -scheme "$SCHEME" -showBuildSettings \
            | /usr/bin/grep -E "PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER" || true

      # Fetch signing assets and apply them
      - name: Set up signing (automatic via ASC)
        script: |
          set -e
          keychain initialize
          # Options first, then bundle id as positional arg:
          app-store-connect fetch-signing-files --type IOS_APP_STORE --create "$BUNDLE_ID"
          keychain add-certificates
          # Apply the provisioning profiles to the project & generate export_options.plist
          xcode-project use-profiles

          echo "------ Debug: installed code signing identities ------"
          security find-identity -p codesigning -v || true

          echo "------ Debug: installed provisioning profiles ------"
          ls -lah "$HOME/Library/MobileDevice/Provisioning Profiles" || true
          /usr/bin/grep -R "com.threadloop.app" "$HOME/Library/MobileDevice/Provisioning Profiles" -n || true

          echo "------ Debug: current Xcode build settings (key bits) ------"
          xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -showBuildSettings \
            | /usr/bin/grep -E "PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER" || true

      # Archive + export in one go, then place the IPA into artifacts
      - name: Build IPA
        script: |
          set -e
          xcode-project build-ipa --workspace "$WORKSPACE" --scheme "$SCHEME" --archive-method app-store

          echo "------ Search for generated IPA ------"
          ls -lah "$CM_BUILD_DIR/ipa" || true
          ls -lah "$CM_BUILD_DIR" | grep -i '\.ipa' || true

          FOUND_IPA="$(find "$CM_BUILD_DIR" -name '*.ipa' -print -quit || true)"
          if [ -z "$FOUND_IPA" ]; then
            FOUND_IPA="$(find . ios/App -name '*.ipa' -print -quit || true)"
          fi

          if [ -n "$FOUND_IPA" ]; then
            echo "Found IPA at: $FOUND_IPA"
            cp "$FOUND_IPA" "$CM_ARTIFACTS/"
          else
            echo "❌ No IPA found after build-ipa (likely a signing/export issue)"
            echo "Dumping export_options.plist (if present):"
            [ -f /Users/builder/export_options.plist ] && cat /Users/builder/export_options.plist || echo "No export_options.plist"
            exit 2
          fi

          echo "------ Final artifacts ------"
          ls -lah "$CM_ARTIFACTS" || true

    artifacts:
      - $CM_ARTIFACTS/*.ipa
      - /Users/builder/export_options.plist

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        # beta_groups:
        #   - Internal Testers
